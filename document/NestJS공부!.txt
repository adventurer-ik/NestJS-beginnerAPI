다양한 터틀 과제를 준비했습니다.
과제를 통해 지금까지 배운 프로그래밍 지식뿐만 아니라
문서를 얼마나 잘 읽고 이해할 수 있는지도 테스트할 수 있습니다.

이러한 능력은 숙련된 개발자로서 습득해야 할 핵심 기술입니다.
항상 다른 사람이 무엇을 해야할지 가르쳐 주기를 바랄 수 없으니까요.

자료를 보고 스스로 알아낼 수 있어야 합니다.
그러니 반드시 문서를 열어 한번 쭉 훑어보세요.

그리고 다음 강의로 넘어가 과제를 시작해보세요.
몇몇 과제는 꽤 어려울 수 있습니다.

하지만 어렵다는 것은 좋은 것입니다.
힘들게 해낼수록 더 많이 배우게 되니까요.



<NestJS>
데코레이터에 익숙해져야 함.
데코레이터는 class에 함수 기능을 추가할 수 있음.
일단, 그냥 클래스 위의 함수이고, 클래스를 위해 움직인다고 생각하면 됨.
아이스크림 위에 초콜릿 칩 뿌리는 거랑 같다고 보자.

nestJS는 main.ts로 정해져있음.
무조건 main.ts에서 시작함. (고정 이름)

main.ts → app.module.ts → app.controller.ts → app.service.ts
얼추 흐름을 기록하자면 위와 같음.

1
main.ts 
- 모든 것을 시작하는 녀석
- 하나의 모듈에서 어플리케이션을 생성함.
- 앱 모듈은 모든 것의 루트 모듈 같은 거임. :어플리케이션의 일부. 장고를 쓴다면 앱이라 볼 수 있고..
- 컨트롤러, 프로파이더 등등 알아두자.

2
컨트롤러
- 기본적으로 url을 가져오고 함수를 실행하는 거임.
- express로 치면 라우터 같은 존재! - url 가져오고! 함수 실행!
- 이름 그대로 컨-트-롤-러
- @Get(): express의 get 라우터와 같은 역할..!!
- 주의: 데코레이터는 꾸며주는 함수나 클래스랑 붙어있어야 함.
       데코레이터와 함수 사이에 빈칸을 두면 안됨.
- url을 받아와서 함수로 매핑하는 역할
- nestJS 덕분에 우리는 라우터 세팅 안해도 됨.
- @Get(), @Post() 등등 써주는 것만으로도 

3
서비스
- 구조와 아키텍처에 대해 알아야 함
- NestJS는 컨트롤러를 비즈니스 로직이랑 구분 짓고 싶어함.
- 컨트롤러는 단순히 url을 받아와서 맞는 함수와 매핑하는 역할
- 나머지 비즈니스 로직은 서비스단에서 수행. 

4
챕터 정리
기억하자. 컨트롤러의 역할은 url을 가져오고 function을 리턴하는 것.
그리고 우리가 이 function을 놓는 곳은 서비스!
즉, 서비스는 비지니스 로직을 실행하는 역할!

이번 강의에서는
컨트롤러에 모든 url을 다 넣어놓고, 서비스는 뭔가 특정 내용을 리턴하거나, 또는 필요하다면 DB에 연락하는 것!


@Controller('A')
에서 'A' 부분이 url의 Entry Point를 컨트롤한다~!!

뭔가를 원한다면 요청해야 한다.
url의 파라미터를 원한다면?
파라미터 값을 달라고 요청해야 한다.
ex)
@Get("/:id")       → 여기 url의 id 값을 알고 싶으면
getOne(@Param("id") movieId: string) {    → 여기서 @Param으로 요청해서 가져온다.
    return `This will return one movie with the id: ${movieId}`;
}


주의사항
URL로 보낸 값은 일단 string이다~!

7/19
- UpdateMovieDTO 추가
 : npm i @nestjs/mapped-types 하여 패키지 설치 - 타입을 변환시키고 사용할 수 있게 해주는 패키지.
 : NestJS 만든 사람들이 제공해줌!
 : https://www.npmjs.com/package/@nestjs/mapped-types
 : PartialType() 사용하기 위해서!
 : 우리의 DTO를 변환 시키는 것을 도와준다!
 : UpdateMovieDTO를 CreateMovieDTO의 값을 그대로 복붙해서, ? 넣어서 없어도 된다고 사용 하는 것 보다는
 PartialType을 활용해서 중복 제거하고, 변환해서 쓰게끔해주면 된다.

- CreateMovieDTO
 : genres는 입력 안할 수도 있으니, @IsOptional 데코레이션 활용.

- class-validator 구글링
 : https://github.com/typestack/class-validator

7/21
<nestJs 가 기본 제공하는 jest 테스트>
it()
테스트 클로저를 생성합니다.
it()대신 test()도 사용 가능

expect()
값을 테스트할 때마다 expect 함수가 사용됩니다. expect하나만 콜하는 경우는 거의 없을 것입니다.

toBe()는 Object.is를 사용하여 정확한 동등성을 테스트합니다. 객체의 값을 확인하려면 대신 toEqual()을 사용하세요.

String
toMatch를 사용하여 정규 표현식에 대해 문자열을 확인할 수 있습니다.
ex) expect('Christoph').toMatch(/stop/);

Arrays and iterables
toContain()을 사용하여 배열 또는 이터러블에 특정 항목이 포함되어 있는지 확인할 수 있습니다.
ex) expect(shoppingList).toContain('milk');

Exceptions
특정 함수가 호출될 때 오류가 발생하는지 테스트하려면 toThrow를 사용하십시오.
예외를 발생시키는 함수는 래핑 함수 내에서 호출해야 합니다. 그렇지 않으면 toThrow 어설션이 실패합니다.
ex) expect(() => compileAndroidCode()).toThrow('you are using the wrong JDK');

https://jestjs.io/docs/getting-started

- 유닛 테스트를 하는 습관이 필요